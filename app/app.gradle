plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services' apply false
    id 'com.google.firebase.crashlytics' apply false
}

def taskRequests = getGradle().getStartParameter().getTaskRequests().toString()
def isGooglePlay = !(taskRequests.contains("Foss") || taskRequests.contains("foss"))

if (isGooglePlay) {
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'com.google.firebase.crashlytics'
}

apply from: "$project.rootDir/gradle/common.gradle"

android {
    namespace 'com.shifthackz.aisdv1.app'
    defaultConfig {
        applicationId "com.shifthackz.aisdv1.app"

        buildConfigField "String", "CLOUD_AI_URL", "\"https://sdai.moroz.cc\""
        buildConfigField "String", "UPDATE_API_URL", "\"https://sdai.moroz.cc\""
        buildConfigField "String", "DEMO_MODE_API_URL", "\"https://sdai.moroz.cc\""
        buildConfigField "String", "POLICY_URL", "\"https://sdai.moroz.cc/policy.html\""
        buildConfigField "String", "GITHUB_SOURCE_URL", "\"https://github.com/ShiftHackZ/Stable-Diffusion-Android\""
        buildConfigField "String", "SETUP_INSTRUCTIONS_URL", "\"https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki\""
    }

    signingConfigs {
        release {
            def tmpFilePath = System.getProperty("user.home") + "/work/_temp/keystore/"
            def allFilesFromDir = new File(tmpFilePath).listFiles()

            if (allFilesFromDir != null) {
                def keystoreFile = allFilesFromDir.first()
                keystoreFile.renameTo("keystore/aisdv1.jks")
            }

            storeFile = file("keystore/aisdv1.jks")
            storePassword System.getenv("AISDV1_STORE_PASSWORD")
            keyAlias System.getenv("AISDV1_KEY_ALIAS")
            keyPassword System.getenv("AISDV1_KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "type"
    productFlavors {
        foss {
            dimension "type"
            applicationIdSuffix = ".foss"
            resValue "string", "app_name", "SDAI FOSS"
            buildConfigField "String", "BUILD_FLAVOR_TYPE", "\"FOSS\""
        }
        playstore {
            dimension "type"
            resValue "string", "app_name", "SDAI"
            buildConfigField "String", "BUILD_FLAVOR_TYPE", "\"GOOGLE_PLAY\""
        }
    }
}

dependencies {
    implementation project(":core:common")
    implementation project(":core:imageprocessing")
    implementation project(":core:validation")
    implementation project(":presentation")
    implementation project(":network")
    implementation project(":storage")
    implementation project(":domain")
    implementation project(":feature:ads")
    implementation project(":feature:analytics")
    implementation project(":data")
    implementation project(":demo")
    implementation di.koinCore
    implementation di.koinAndroid
    implementation di.koinCompose
    implementation reactive.rxkotlin
    implementation reactive.rxandroid
    implementation log.timber

    playstoreImplementation platform(proprietary.firebaseBom)
    playstoreImplementation proprietary.firebaseAnalytics
    playstoreImplementation proprietary.firebaseCrashlytics
    playstoreImplementation proprietary.playServicesAds
}

kapt {
    correctErrorTypes true
}
